<!DOCTYPE html>
<html>

<head>
    <title>Pavan.K CareStream </title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <div>
        Video : <select id="camera"></select>
    </div>
    <br>
    <video id="myVideo" autoplay></video>
    <video id="theirVideo" autoplay></video>
    <div>
        <input type="file" id="sendFile" /><br />
        <progress id="fileProgress" value="1" max="100"></progress>
        <a id="receivedFileLink"></a>
        <hr>
    </div>
    <div>
        <label>Your Name:</label><input id="myName" type="text" />
        <label>Message:</label><input id="myMessage" type="text" />
        <input id="sendMessage" type="submit">
        <div id="chatArea">Message Output:<br></div>
        <div id="signalingArea">Signalling Message:<br></div>
    </div>
    </div>
    <script>
        var downloadLink = document.querySelector("#receivedFileLink");
        var myVideo = document.querySelector("#myVideo");
        var theirVideo = document.querySelector("#theirVideo");
        var myName = document.querySelector('#myName');
        var myMessage = document.querySelector('#myMessage');
        var sendMessage = document.querySelector('#sendMessage');
        var sendFile = document.querySelector('#sendFile');
        var chatArea = document.querySelector('#chatArea');
        var signalingArea = document.querySelector('#signalingArea');
        var fileProgress = document.querySelector('#fileProgress');
        var ROOM = "chat";
        var SIGNAL_ROOM = "signal_room";
        var FILE_ROOM = "file_room";

        var videoSelect = document.querySelector("#camera");
        var videoSource = videoSelect.value;


        navigator.mediaDevices.enumerateDevices().then(function (devices) {
            for (var i = 0; i < devices.length; i++) {
                var device = devices[i];
                if (device.kind === 'videoinput') {
                    var option = document.createElement('option');
                    option.value = device.deviceId;
                    option.text = device.label || 'camera ' + (i + 1);
                    videoSelect.appendChild(option);
                }
            };
        });



        var configuration = {
            'iceservers': [{
                'url': 'stun:stun.l.google.com:19302'
            }]
        };
        var rtcPeerConn;
        var dataChannelOptions = {
            ordered: false,
            maxRetransmitTime: 1000,
        };

        var dataChannel;
        var receivedFileSize;
        var receivedFileName;
        var fileBuffer = [];
        var fileSize = 0;

        io = io.connect();
        io.emit('ready', {
            "char_room": ROOM,
            "signal_room": SIGNAL_ROOM,
            "file_room": FILE_ROOM
        });

        io.emit('signal', {
            "type": "user_here",
            "message": "Are you ready for a call",
            "room": SIGNAL_ROOM
        });

        io.on('files', function (data) {
            receivedFileName = data.filename;
            receivedFileSize = data.filesize;
            displaySignalingMessage("Websockets says the file is on its way is " +
                receivedFileName + "(" + receivedFileSize + ")");
        });

        io.on('signaling_message', function (data) {
            // displaySignalingMessage("signal received: " + data.type);

            //setup RTC Peer COnnection  object
            if (!rtcPeerConn) {
                startSignaling();
            }
            if (data.type != "user_here") {
                var message = JSON.parse(data.message);
                if (message.sdp) {
                    rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
                        if (rtcPeerConn.remoteDescription.type == 'offer') {
                            rtcPeerConn.createAnswer(sendLocalDesc, logError);
                        }
                    }, logError);
                }
                else {
                    rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
                }
            }

        });
        function startSignaling() {
            // displaySignalingMessage("Starting Signaling...")

            rtcPeerConn = new webkitRTCPeerConnection(configuration, null);
            dataChannel = rtcPeerConn.createDataChannel('textMessages', dataChannelOptions);

            dataChannel.onopen = dataChannelStateChanged;
            rtcPeerConn.ondatachannel = receiveDataChannel;

            //send an ice candidate to other peer
            rtcPeerConn.onicecandidate = function (evt) {
                if (evt.candidate) {
                    io.emit('signal', {
                        "type": "ice candidate",
                        "message": JSON.stringify({
                            "candidate": evt.candidate
                        }),
                        "room": SIGNAL_ROOM
                    });
                    // displaySignalingMessage("Completed that ice candidate..");
                }
            }

            //let the negotiationneeded even trigger generation
            rtcPeerConn.onnegotiationneeded = function () {
                // displaySignalingMessage("on negotiation called");
                rtcPeerConn.createOffer(sendLocalDesc, logError);
            }

            //once remote stream arrives , show it in the remote video element 
            rtcPeerConn.onaddstream = function (evt) {
                // displaySignalingMessage("going to add their stream...");
                theirVideo.srcObject = evt.stream;
            };

            //getlocal stream , show it in our video tag and add it to be sent
            navigator.mediaDevices.getUserMedia({
                video: false,
                // video: {
                //     deviceId: [{
                //         sourceId: videoSource
                //     }]
                // },
                audio: false
            })
                .then(function (stream) {
                    // displaySignalingMessage("going to display my stream");
                    myVideo.srcObject = stream;
                    rtcPeerConn.addStream(stream)
                })
                .catch(function (err) {
                    logError(err);
                });
        }

        function dataChannelStateChanged() {
            if (dataChannel.readyState === 'open') {
                displaySignalingMessage("Data Channel Open");
                dataChannel.onmessage = receiveDataChannelMessage;
            }
        }
        function receiveDataChannel(event) {
            displaySignalingMessage("Receiving a data channel");
            dataChannel = event.channel;
            dataChannel.onmessage = receiveDataChannelMessage;
        }
        function receiveDataChannelMessage(event) {
            // displaySignalingMessage("Incoming Message");
            // displayMessage("From DataChannel:" + event.data);

            //This is where we process incoming files

            fileBuffer.push(event.data);
            fileSize += event.data.byteLength;
            fileProgress.value = fileSize;

            //provide link to downloadablevfile when complete

            if (fileSize === receivedFileSize) {
                var received = new window.Blob(fileBuffer);
                fileBuffer = [];
                downloadLink.href = URL.createObjectURL(received);
                downloadLink.download = receivedFileName;
                downloadLink.appendChild(document.createTextNode(receivedFileName + "(" + fileSize + ") bytes"))
            }


        }
        function sendLocalDesc(desc) {
            rtcPeerConn.setLocalDescription(desc, function () {
                // displaySignalingMessage("sending Local Description");
                io.emit('signal', {
                    "type": "SDP",
                    "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }),
                    "room": SIGNAL_ROOM
                });
            }, logError);
        }

        function logError(error) {
            // displaySignalingMessage(error.name + ':' + error.message);
        }

        io.on('announce', function (data) {
            displayMessage(data.message);
        });

        io.on('message', function (data) {
            console.log("meesage received")
            displayMessage(data.author + ": " + data.message);
        });

        function displayMessage(message) {
            chatArea.innerHTML = chatArea.innerHTML + "<br />" + message;
        }
        function displaySignalingMessage(message) {
            signalingArea.innerHTML = signalingArea.innerHTML + "<br />" + message;
        }
        sendMessage.addEventListener('click', function (ev) {
            io.emit('send', {
                "room": ROOM,
                "author": myName.value,
                "message": myMessage.value
            });
            // dataChannel.send(myName.value+" says "+ myMessage.value);
            ev.preventDefault();
        }, false);
        sendFile.addEventListener('change', function (ev) {
            var file = sendFile.files[0];
            displaySignalingMessage("Sending File " + file.name + "(" + file.size + ")..");
            io.emit('files', {
                "filename": file.name,
                "filesize": file.size,
                "room": FILE_ROOM
            });
            fileProgress.max = file.size;
            var chunkSize = 16384;
            var sliceFile = function (offset) {
                var reader = new window.FileReader();
                reader.onload = (function () {
                    return function (e) {
                        dataChannel.send(e.target.result);
                        if (file.size > offset + e.target.result.byteLength) {
                            window.setTimeout(sliceFile, 0, offset + chunkSize);
                        }
                        fileProgress.value = offset + e.target.result.byteLength;
                    };
                })(file);
                var slice = file.slice(offset, offset + chunkSize);
                reader.readAsArrayBuffer(slice);
            };
            sliceFile(0)
        }, false);

    </script>
</body>

</html>